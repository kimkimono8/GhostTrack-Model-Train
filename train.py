from ultralytics import YOLO

# -------------------------------
# ‚öôÔ∏è CONFIG
# -------------------------------
MODEL_NAME = "yolo12n"
DATA_YAML = "E:/GhostTrack_YOLOv12n_Train/dataset.yaml"

EPOCHS = 94
IMG_SIZE = 640
BATCH_SIZE = 14
DEVICE = 0

PROJECT_NAME = "runs"
RUN_NAME = "train_GhostTrack_DEMO_yolo12n_2"

# -------------------------------
# üöÄ TRAINING
# -------------------------------
def train():
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô YOLO ...")

    model = YOLO(MODEL_NAME)

    try:
        model.train(
            data=DATA_YAML,
            epochs=EPOCHS,
            imgsz=IMG_SIZE,
            batch=BATCH_SIZE,
            pretrained=False,
            lr0=0.001,                # learning rate
            lrf=0.0001,               # learning rate final
            warmup_epochs=15,         # warmup epochs
            warmup_bias_lr=0.05,      # warmup bias learning rate
            weight_decay=0.0008,      # weight decay
            cos_lr=True,              # cosine learning rate scheduler
            momentum=0.97,            # momentum for SGD
            dropout=0.2,              # dropout probability
            patience=0,               # number of epochs with no improvement before stopping
            multi_scale=True,        # ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î multi scale (‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ VRAM)
            rect=True,                # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
            hsv_h=0.015,              # HUE adjustment range
            hsv_s=0.6,               # SAT adjustment range
            hsv_v=0.3,               # VALUE adjustment range
            scale=0.4,               # Scaling factor for multi-scale
            fliplr=0.5,              # Horizontal flip probability
            flipud=0.1,              # Vertical flip probability
            mosaic=0.05,              # ‡πÉ‡∏ä‡πâ Mosaic augmentation ‡πÅ‡∏ï‡πà‡πÄ‡∏ö‡∏≤ ‡πÜ
            mixup=0.05,              # Mixup augmentation
            cutmix=0.05,             # CutMix augmentation
            cache="disk",            # ‡πÉ‡∏ä‡πâ disk cache (‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î RAM)
            plots=True,              # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏≤‡∏ü
            seed=42,                 # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ random seed
            save=True,               # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
            save_period=1,           # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏∏‡∏Å 1 epoch
            save_json=True,          # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô JSON
            project=PROJECT_NAME,    # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
            name=RUN_NAME,           # ‡∏ä‡∏∑‡πà‡∏≠ run
            resume=False,            # ‡πÑ‡∏°‡πà resume ‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏Å‡πà‡∏≤
            val=True,                # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£ validation
            verbose=True,            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        )

    except Exception as e:
        print(f"[üî• ERROR] Training failed: {e}")
        return

    print(f"üî• ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏´‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {PROJECT_NAME}/{RUN_NAME}/weights")

if __name__ == "__main__":
    train()
